// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text;
using Tema6.Models;
using Tema6.Inputs;
using CSharp.Choices;

namespace Tema6.Outputs
{
    public static partial class CreateReplyResult
    {
        public static IPublishReplyResult Match(this IPublishReplyResult self, System.Func<ReplyValid, IPublishReplyResult> whenReplyValid, System.Func<ReplyInvalid, IPublishReplyResult> whenReplyInvalid, System.Func<InvalidRequest, IPublishReplyResult> whenInvalidRequest)
        {
            switch ((self))
            {
                case ReplyValid replyvalid:
                    return whenReplyValid(replyvalid);
                case ReplyInvalid replyinvalid:
                    return whenReplyInvalid(replyinvalid);
                case InvalidRequest invalidrequest:
                    return whenInvalidRequest(invalidrequest);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static async System.Threading.Tasks.Task<IPublishReplyResult> MatchAsync(this IPublishReplyResult self, System.Func<ReplyValid, System.Threading.Tasks.Task<IPublishReplyResult>> whenReplyValid, System.Func<ReplyInvalid, System.Threading.Tasks.Task<IPublishReplyResult>> whenReplyInvalid, System.Func<InvalidRequest, System.Threading.Tasks.Task<IPublishReplyResult>> whenInvalidRequest)
        {
            switch ((self))
            {
                case ReplyValid replyvalid:
                    return await whenReplyValid(replyvalid);
                case ReplyInvalid replyinvalid:
                    return await whenReplyInvalid(replyinvalid);
                case InvalidRequest invalidrequest:
                    return await whenInvalidRequest(invalidrequest);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static R Match<R>(this IPublishReplyResult self, System.Func<ReplyValid, R> whenReplyValid, System.Func<ReplyInvalid, R> whenReplyInvalid, System.Func<InvalidRequest, R> whenInvalidRequest)
        {
            switch ((self))
            {
                case ReplyValid replyvalid:
                    return whenReplyValid(replyvalid);
                case ReplyInvalid replyinvalid:
                    return whenReplyInvalid(replyinvalid);
                case InvalidRequest invalidrequest:
                    return whenInvalidRequest(invalidrequest);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static async System.Threading.Tasks.Task<R> MatchAsync<R>(this IPublishReplyResult self, System.Func<ReplyValid, System.Threading.Tasks.Task<R>> whenReplyValid, System.Func<ReplyInvalid, System.Threading.Tasks.Task<R>> whenReplyInvalid, System.Func<InvalidRequest, System.Threading.Tasks.Task<R>> whenInvalidRequest)
        {
            switch ((self))
            {
                case ReplyValid replyvalid:
                    return await whenReplyValid(replyvalid);
                case ReplyInvalid replyinvalid:
                    return await whenReplyInvalid(replyinvalid);
                case InvalidRequest invalidrequest:
                    return await whenInvalidRequest(invalidrequest);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }
    }
}
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text;
using CSharp.Choices;

namespace Tema6.Outputs
{
    public static partial class ReplyReceivedAckSentToQuestionOwnerResult
    {
        public static IReplyReceivedAckSentToQuestionOwnerResult Match(this IReplyReceivedAckSentToQuestionOwnerResult self, System.Func<ReplyReceived, IReplyReceivedAckSentToQuestionOwnerResult> whenReplyReceived, System.Func<InvalidReplyReceived, IReplyReceivedAckSentToQuestionOwnerResult> whenInvalidReplyReceived)
        {
            switch ((self))
            {
                case ReplyReceived replyreceived:
                    return whenReplyReceived(replyreceived);
                case InvalidReplyReceived invalidreplyreceived:
                    return whenInvalidReplyReceived(invalidreplyreceived);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static async System.Threading.Tasks.Task<IReplyReceivedAckSentToQuestionOwnerResult> MatchAsync(this IReplyReceivedAckSentToQuestionOwnerResult self, System.Func<ReplyReceived, System.Threading.Tasks.Task<IReplyReceivedAckSentToQuestionOwnerResult>> whenReplyReceived, System.Func<InvalidReplyReceived, System.Threading.Tasks.Task<IReplyReceivedAckSentToQuestionOwnerResult>> whenInvalidReplyReceived)
        {
            switch ((self))
            {
                case ReplyReceived replyreceived:
                    return await whenReplyReceived(replyreceived);
                case InvalidReplyReceived invalidreplyreceived:
                    return await whenInvalidReplyReceived(invalidreplyreceived);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static R Match<R>(this IReplyReceivedAckSentToQuestionOwnerResult self, System.Func<ReplyReceived, R> whenReplyReceived, System.Func<InvalidReplyReceived, R> whenInvalidReplyReceived)
        {
            switch ((self))
            {
                case ReplyReceived replyreceived:
                    return whenReplyReceived(replyreceived);
                case InvalidReplyReceived invalidreplyreceived:
                    return whenInvalidReplyReceived(invalidreplyreceived);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static async System.Threading.Tasks.Task<R> MatchAsync<R>(this IReplyReceivedAckSentToQuestionOwnerResult self, System.Func<ReplyReceived, System.Threading.Tasks.Task<R>> whenReplyReceived, System.Func<InvalidReplyReceived, System.Threading.Tasks.Task<R>> whenInvalidReplyReceived)
        {
            switch ((self))
            {
                case ReplyReceived replyreceived:
                    return await whenReplyReceived(replyreceived);
                case InvalidReplyReceived invalidreplyreceived:
                    return await whenInvalidReplyReceived(invalidreplyreceived);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }
    }
}
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using CSharp.Choices;

namespace Profile.Domain.CreateProfileWorkflow
{
    public static partial class CreateProfileResult
    {
        public static ICreateProfileResult Match(this ICreateProfileResult self, System.Func<ProfileCreated, ICreateProfileResult> whenProfileCreated, System.Func<ProfileNotCreated, ICreateProfileResult> whenProfileNotCreated, System.Func<ProfileValidationFailed, ICreateProfileResult> whenProfileValidationFailed)
        {
            switch ((self))
            {
                case ProfileCreated profilecreated:
                    return whenProfileCreated(profilecreated);
                case ProfileNotCreated profilenotcreated:
                    return whenProfileNotCreated(profilenotcreated);
                case ProfileValidationFailed profilevalidationfailed:
                    return whenProfileValidationFailed(profilevalidationfailed);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static async System.Threading.Tasks.Task<ICreateProfileResult> MatchAsync(this ICreateProfileResult self, System.Func<ProfileCreated, System.Threading.Tasks.Task<ICreateProfileResult>> whenProfileCreated, System.Func<ProfileNotCreated, System.Threading.Tasks.Task<ICreateProfileResult>> whenProfileNotCreated, System.Func<ProfileValidationFailed, System.Threading.Tasks.Task<ICreateProfileResult>> whenProfileValidationFailed)
        {
            switch ((self))
            {
                case ProfileCreated profilecreated:
                    return await whenProfileCreated(profilecreated);
                case ProfileNotCreated profilenotcreated:
                    return await whenProfileNotCreated(profilenotcreated);
                case ProfileValidationFailed profilevalidationfailed:
                    return await whenProfileValidationFailed(profilevalidationfailed);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static R Match<R>(this ICreateProfileResult self, System.Func<ProfileCreated, R> whenProfileCreated, System.Func<ProfileNotCreated, R> whenProfileNotCreated, System.Func<ProfileValidationFailed, R> whenProfileValidationFailed)
        {
            switch ((self))
            {
                case ProfileCreated profilecreated:
                    return whenProfileCreated(profilecreated);
                case ProfileNotCreated profilenotcreated:
                    return whenProfileNotCreated(profilenotcreated);
                case ProfileValidationFailed profilevalidationfailed:
                    return whenProfileValidationFailed(profilevalidationfailed);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }

        public static async System.Threading.Tasks.Task<R> MatchAsync<R>(this ICreateProfileResult self, System.Func<ProfileCreated, System.Threading.Tasks.Task<R>> whenProfileCreated, System.Func<ProfileNotCreated, System.Threading.Tasks.Task<R>> whenProfileNotCreated, System.Func<ProfileValidationFailed, System.Threading.Tasks.Task<R>> whenProfileValidationFailed)
        {
            switch ((self))
            {
                case ProfileCreated profilecreated:
                    return await whenProfileCreated(profilecreated);
                case ProfileNotCreated profilenotcreated:
                    return await whenProfileNotCreated(profilenotcreated);
                case ProfileValidationFailed profilevalidationfailed:
                    return await whenProfileValidationFailed(profilevalidationfailed);
                default:
                    throw new System.NotSupportedException("This switch statement should be exhaustive");
            }
        }
    }
}